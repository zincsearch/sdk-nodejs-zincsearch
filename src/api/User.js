/**
 * Zinc Search engine API
 * Zinc Search engine API documents https://docs.zincsearch.com
 *
 * The version of the OpenAPI document: 0.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthLoginRequest from '../model/AuthLoginRequest';
import AuthLoginResponse from '../model/AuthLoginResponse';
import MetaHTTPResponseError from '../model/MetaHTTPResponseError';
import MetaHTTPResponseID from '../model/MetaHTTPResponseID';
import MetaUser from '../model/MetaUser';

/**
* User service.
* @module api/User
* @version 0.2.7
*/
export default class User {

    /**
    * Constructs a new User. 
    * @alias module:api/User
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the delete operation.
     * @callback module:api/User~deleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * @param {String} id User id
     * @param {module:api/User~deleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseID}
     */
    delete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling delete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseID;
      return this.apiClient.callApi(
        '/api/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/User~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * @param {module:model/MetaUser} user User data
     * @param {module:api/User~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseID}
     */
    create(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseID;
      return this.apiClient.callApi(
        '/api/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/User~listCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MetaUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user
     * @param {module:api/User~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MetaUser>}
     */
    list(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MetaUser];
      return this.apiClient.callApi(
        '/api/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/User~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {module:model/AuthLoginRequest} login Login credentials
     * @param {module:api/User~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthLoginResponse}
     */
    login(login, callback) {
      let postBody = login;
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthLoginResponse;
      return this.apiClient.callApi(
        '/api/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/User~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user
     * @param {module:model/MetaUser} user User data
     * @param {module:api/User~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseID}
     */
    update(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling update");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseID;
      return this.apiClient.callApi(
        '/api/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
