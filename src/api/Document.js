/**
 * Zinc Search engine API
 * Zinc Search engine API documents https://docs.zincsearch.com
 *
 * The version of the OpenAPI document: 0.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetaHTTPResponseDocument from '../model/MetaHTTPResponseDocument';
import MetaHTTPResponseError from '../model/MetaHTTPResponseError';
import MetaHTTPResponseID from '../model/MetaHTTPResponseID';
import MetaHTTPResponseRecordCount from '../model/MetaHTTPResponseRecordCount';
import MetaJSONIngest from '../model/MetaJSONIngest';

/**
* Document service.
* @module api/Document
* @version 0.3.3
*/
export default class Document {

    /**
    * Constructs a new Document. 
    * @alias module:api/Document
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulk operation.
     * @callback module:api/Document~bulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseRecordCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk documents
     * @param {String} query Query
     * @param {module:api/Document~bulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseRecordCount}
     */
    bulk(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling bulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseRecordCount;
      return this.apiClient.callApi(
        '/api/_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkv2 operation.
     * @callback module:api/Document~bulkv2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseRecordCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulkv2 documents
     * @param {module:model/MetaJSONIngest} query Query
     * @param {module:api/Document~bulkv2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseRecordCount}
     */
    bulkv2(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling bulkv2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseRecordCount;
      return this.apiClient.callApi(
        '/api/_bulkv2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete operation.
     * @callback module:api/Document~deleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete document
     * @param {String} index Index
     * @param {String} id ID
     * @param {module:api/Document~deleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseDocument}
     */
    delete(index, id, callback) {
      let postBody = null;
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling delete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling delete");
      }

      let pathParams = {
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseDocument;
      return this.apiClient.callApi(
        '/api/{index}/_doc/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the esBulk operation.
     * @callback module:api/Document~esBulkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ES bulk documents
     * @param {String} query Query
     * @param {module:api/Document~esBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    esBulk(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling esBulk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/es/_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the index operation.
     * @callback module:api/Document~indexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update document
     * @param {String} index Index
     * @param {Object.<String, Object>} document Document
     * @param {module:api/Document~indexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseID}
     */
    index(index, document, callback) {
      let postBody = document;
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling index");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling index");
      }

      let pathParams = {
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseID;
      return this.apiClient.callApi(
        '/api/{index}/_doc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexWithID operation.
     * @callback module:api/Document~indexWithIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update document with id
     * @param {String} index Index
     * @param {String} id ID
     * @param {Object.<String, Object>} document Document
     * @param {module:api/Document~indexWithIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseID}
     */
    indexWithID(index, id, document, callback) {
      let postBody = document;
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling indexWithID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling indexWithID");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling indexWithID");
      }

      let pathParams = {
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseID;
      return this.apiClient.callApi(
        '/api/{index}/_doc/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multi operation.
     * @callback module:api/Document~multiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseRecordCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Multi documents
     * @param {String} index Index
     * @param {String} query Query
     * @param {module:api/Document~multiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseRecordCount}
     */
    multi(index, query, callback) {
      let postBody = query;
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling multi");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling multi");
      }

      let pathParams = {
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseRecordCount;
      return this.apiClient.callApi(
        '/api/{index}/_multi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/Document~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetaHTTPResponseID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update document with id
     * @param {String} index Index
     * @param {String} id ID
     * @param {Object.<String, Object>} document Document
     * @param {module:api/Document~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetaHTTPResponseID}
     */
    update(index, id, document, callback) {
      let postBody = document;
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling update");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling update");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling update");
      }

      let pathParams = {
        'index': index,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetaHTTPResponseID;
      return this.apiClient.callApi(
        '/api/{index}/_update/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
