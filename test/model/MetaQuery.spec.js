/**
 * Zinc Search engine API
 * Zinc Search engine API documents https://docs.zincsearch.com
 *
 * The version of the OpenAPI document: 0.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ZincSearchSDK);
  }
}(this, function(expect, ZincSearchSDK) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ZincSearchSDK.MetaQuery();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetaQuery', function() {
    it('should create an instance of MetaQuery', function() {
      // uncomment below and update the code to test MetaQuery
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be.a(ZincSearchSDK.MetaQuery);
    });

    it('should have the property bool (base name: "bool")', function() {
      // uncomment below and update the code to test the property bool
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property exists (base name: "exists")', function() {
      // uncomment below and update the code to test the property exists
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property fuzzy (base name: "fuzzy")', function() {
      // uncomment below and update the code to test the property fuzzy
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property ids (base name: "ids")', function() {
      // uncomment below and update the code to test the property ids
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property match (base name: "match")', function() {
      // uncomment below and update the code to test the property match
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property matchAll (base name: "match_all")', function() {
      // uncomment below and update the code to test the property matchAll
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property matchBoolPrefix (base name: "match_bool_prefix")', function() {
      // uncomment below and update the code to test the property matchBoolPrefix
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property matchNone (base name: "match_none")', function() {
      // uncomment below and update the code to test the property matchNone
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property matchPhrase (base name: "match_phrase")', function() {
      // uncomment below and update the code to test the property matchPhrase
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property matchPhrasePrefix (base name: "match_phrase_prefix")', function() {
      // uncomment below and update the code to test the property matchPhrasePrefix
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property multiMatch (base name: "multi_match")', function() {
      // uncomment below and update the code to test the property multiMatch
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property queryString (base name: "query_string")', function() {
      // uncomment below and update the code to test the property queryString
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property range (base name: "range")', function() {
      // uncomment below and update the code to test the property range
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property regexp (base name: "regexp")', function() {
      // uncomment below and update the code to test the property regexp
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property simpleQueryString (base name: "simple_query_string")', function() {
      // uncomment below and update the code to test the property simpleQueryString
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property term (base name: "term")', function() {
      // uncomment below and update the code to test the property term
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property terms (base name: "terms")', function() {
      // uncomment below and update the code to test the property terms
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

    it('should have the property wildcard (base name: "wildcard")', function() {
      // uncomment below and update the code to test the property wildcard
      //var instance = new ZincSearchSDK.MetaQuery();
      //expect(instance).to.be();
    });

  });

}));
